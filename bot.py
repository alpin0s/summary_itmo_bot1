import asyncio
import datetime
import random 
import re
import sqlite3

import requests
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, CommandObject
from aiogram.types import Message

BOT_TOKEN = '–í–∞—à —Ç–æ–∫–µ–Ω' 
GEMINI_API_KEY = '–ì–µ–º–∏–Ω–∏ —Ç–æ–∫–µ–Ω' 
DB_FILE = "chats.db"

API_URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={GEMINI_API_KEY}"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
daily_message_cache = {}


def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS enabled_chats (chat_id INTEGER PRIMARY KEY)")
    conn.commit()
    conn.close()

def load_enabled_chats():
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("SELECT chat_id FROM enabled_chats")
        chats = {row[0] for row in cursor.fetchall()}
        conn.close()
        return chats
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤ –∏–∑ –ë–î: {e}")
        return set()

def add_chat(chat_id):
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("INSERT INTO enabled_chats (chat_id) VALUES (?)", (chat_id,))
        conn.commit()
        conn.close()
        print(f"–ß–∞—Ç {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        return True
    except sqlite3.IntegrityError:
        conn.close()
        return False
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ –≤ –ë–î: {e}")
        return False

def remove_chat(chat_id):
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM enabled_chats WHERE chat_id = ?", (chat_id,))
        rows_affected = cursor.rowcount
        conn.commit()
        conn.close()
        if rows_affected > 0:
            print(f"–ß–∞—Ç {chat_id} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
            return True
        return False
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ –∏–∑ –ë–î: {e}")
        return False


def call_gemini_api(messages_text):
    """–í—ã–∑—ã–≤–∞–µ—Ç API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–≤–æ–¥–∫–∏."""
    headers = {'Content-Type': 'application/json'}
    prompt_text = (
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–µ—Ä–µ–ø–∏—Å–∫—É –≤ —á–∞—Ç–µ. –°–≥—Ä—É–ø–ø–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–µ–º–∞–º. "
        "–î–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã —É–∫–∞–∂–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–∫–æ–±–∫–∞—Ö, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ ID –ü–ï–†–í–û–ì–û —Å–æ–æ–±—â–µ–Ω–∏—è. "
        "–¢–≤–æ–π –æ—Ç–≤–µ—Ç –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –¢–û–õ–¨–ö–û —Å–ø–∏—Å–∫–æ–º —Ç–µ–º. –ù–µ –¥–æ–±–∞–≤–ª—è–π –∑–∞–≥–æ–ª–æ–≤–∫–∏, –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç. "
        "–§–æ—Ä–º–∞—Ç –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ —Ç–∞–∫–∏–º: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã (–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ) (N —Å–æ–æ–±—â–µ–Ω–∏–π) - –ò–î M'.\n"
        f"–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n{messages_text}"
    )
    json_data = {'contents': [{'parts': [{'text': prompt_text}]}],'generationConfig': {'temperature': 0.4, 'maxOutputTokens': 2048,}}
    try:
        response = requests.post(API_URL, headers=headers, json=json_data, timeout=120)
        response.raise_for_status()
        data = response.json()
        return data['candidates'][0]['content']['parts'][0]['text']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Gemini API –¥–ª—è —Å–≤–æ–¥–∫–∏: {e}")
    return None

def call_gemini_for_question(messages_text: str, user_question: str):
    """–í—ã–∑—ã–≤–∞–µ—Ç API –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    headers = {'Content-Type': 'application/json'}
    prompt_text = (
        "–¢—ã ‚Äî —É–º–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram-—á–∞—Ç–∞. "
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞–π–¥–∏ —Å–∞–º—É—é –≤–∞–∂–Ω—É—é –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–æ–ø—Ä–æ—Å—É –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π, –Ω–æ –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–π –æ—Ç–≤–µ—Ç. "
        "–ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–∏—á–µ–≥–æ –æ—Ç —Å–µ–±—è. –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, —Ç–∞–∫ –∏ –Ω–∞–ø–∏—à–∏: '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ –Ω–µ–¥–∞–≤–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞.'\n\n"
        f"--- –ò–°–¢–û–†–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô ---\n{messages_text}\n\n"
        f"--- –í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---\n{user_question}"
    )
    json_data = {'contents': [{'parts': [{'text': prompt_text}]}],'generationConfig': {'temperature': 0.7, 'maxOutputTokens': 1024,}}
    try:
        response = requests.post(API_URL, headers=headers, json=json_data, timeout=120)
        response.raise_for_status()
        data = response.json()
        return data['candidates'][0]['content']['parts'][0]['text']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Gemini API –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: {e}")
    return None


async def create_and_send_summary(chat_id: int, summary_title: str):
    """–°–æ–∑–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–Ω–µ–≤–Ω–æ–º –∫—ç—à–µ."""
    messages_to_process = daily_message_cache.get(chat_id, [])
    
    if not messages_to_process:
        print(f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
        if "–≤—Ä—É—á–Ω—É—é" in summary_title:
             await bot.send_message(chat_id, "–°–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç—á–µ—Ç–∞ –µ—â–µ –Ω–µ—Ç.")
        return

    print(f"–°–æ–∑–¥–∞—é '{summary_title}' –¥–ª—è —á–∞—Ç–∞ {chat_id} –Ω–∞ –æ—Å–Ω–æ–≤–µ {len(messages_to_process)} —Å–æ–æ–±—â–µ–Ω–∏–π.")
    messages_for_api = "\n".join([f"[{msg['id']}] {msg['text']}" for msg in messages_to_process])
    api_response = call_gemini_api(messages_for_api)

    if not api_response:
        await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏.")
        return

    topic_pattern = re.compile(r"(.+?)\s+\((.*?)\)\s+\((\d+)(?: —Å–æ–æ–±—â–µ–Ω–∏[–π|—è|–µ])?\)\s+-\s+(?:–ò–î\s)?(\d+)", re.MULTILINE)
    topics = topic_pattern.findall(api_response)

    if not topics:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI –¥–ª—è —á–∞—Ç–∞ {chat_id}:\n{api_response}")
        return

    summary_message = f"**{summary_title}**\n\n"
    for title, desc, count, first_message_id in topics:
        link_chat_id = str(chat_id).replace('-100', '')
        link = f"https://t.me/c/{link_chat_id}/{first_message_id}"
        summary_message += f"üí¨ *{title.strip()}* ({desc}) - [{count} —Å–æ–æ–±—â–µ–Ω–∏–π]({link})\n"

    try:
        await bot.send_message(chat_id, summary_message, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True)
        print(f"–û—Ç—á—ë—Ç –¥–ª—è —á–∞—Ç–∞ {chat_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except TelegramBadRequest as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")


async def send_summary_with_delay(chat_id: int, delay: float):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–¥–∞–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏."""
    print(f"–û—Ç—á–µ—Ç –¥–ª—è —á–∞—Ç–∞ {chat_id} –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ {delay:.1f} —Å–µ–∫—É–Ω–¥.")
    await asyncio.sleep(delay)
    await create_and_send_summary(chat_id, "üìÜ –ß—Ç–æ –æ–±—Å—É–∂–¥–∞–ª–æ—Å—å –≤ —á–∞—Ç–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:")

async def scheduled_summary_loop():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤ '–æ–∫–Ω–µ' –ø–æ—Å–ª–µ 20:00."""
    while True:
        now = datetime.datetime.now()
        run_time = now.replace(hour=20, minute=0, second=0, microsecond=0)
        if now > run_time:
            run_time += datetime.timedelta(days=1)
        
        sleep_seconds = (run_time - now).total_seconds()
        print(f"–°–ª–µ–¥—É—é—â–∞—è –ø–ª–∞–Ω–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ {sleep_seconds/3600:.2f} —á–∞—Å–æ–≤ (–≤ 20:00).")
        await asyncio.sleep(sleep_seconds)
        
        print("=== –ù–ê–ß–ê–õ–û –ü–ï–†–ò–û–î–ê –†–ê–°–°–´–õ–ö–ò (20:00) ===")
        enabled_chats = load_enabled_chats()

        for chat_id in enabled_chats:
            delay = random.uniform(0, 300) 
            asyncio.create_task(send_summary_with_delay(chat_id, delay))

async def midnight_cleanup_loop():
    while True:
        now = datetime.datetime.now()
        run_time = (now + datetime.timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)
        sleep_seconds = (run_time - now).total_seconds()
        print(f"–°–ª–µ–¥—É—é—â–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —á–µ—Ä–µ–∑ {sleep_seconds/3600:.2f} —á–∞—Å–æ–≤ (–≤ 00:00).")
        await asyncio.sleep(sleep_seconds)

        print("=== –ü–û–õ–ù–û–ß–¨! –û–ß–ò–°–¢–ö–ê –î–ù–ï–í–ù–û–ì–û –ö–≠–®–ê ===")
        daily_message_cache.clear()

@dp.message(Command("enable"), F.chat.type.in_({'group', 'supergroup'}))
async def enable_summary_command(message: types.Message):
    if add_chat(message.chat.id): await message.reply("‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞. –û—Ç—á–µ—Ç—ã –≤ 20:00, –≤–æ–ø—Ä–æ—Å—ã –¥–æ 00:00.")
    else: await message.reply("‚ÑπÔ∏è –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —É–∂–µ –±—ã–ª–∞ –≤–∫–ª—é—á–µ–Ω–∞.")

@dp.message(Command("disable"), F.chat.type.in_({'group', 'supergroup'}))
async def disable_summary_command(message: types.Message):
    if remove_chat(message.chat.id): await message.reply("‚ùå –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    else: await message.reply("‚ÑπÔ∏è –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∏ —Ç–∞–∫ –±—ã–ª–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞.")

@dp.message(Command("summarize_now"), F.chat.type.in_({'group', 'supergroup'}))
async def summarize_now_command(message: types.Message):
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–Ω–µ–≤–Ω–æ–≥–æ –∫—ç—à–∞. –ù–µ –æ—á–∏—â–∞–µ—Ç –µ–≥–æ."""
    await message.reply("‚è±Ô∏è –°–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è...")
    await create_and_send_summary(message.chat.id, "üìä –°–≤–æ–¥–∫–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º (–∑–∞–ø—Ä–æ—à–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é):")

@dp.message(Command("question"), F.chat.type.in_({'group', 'supergroup'}))
async def question_command(message: types.Message, command: CommandObject):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–Ω–µ–≤–Ω–æ–≥–æ –∫—ç—à–∞."""
    if not command.args:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.reply("üîç –ò—â—É –æ—Ç–≤–µ—Ç –≤–æ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è...")
    all_messages_for_today = daily_message_cache.get(message.chat.id, [])

    if not all_messages_for_today:
        await message.reply("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    messages_for_api = "\n".join([msg['text'] for msg in all_messages_for_today])
    answer = call_gemini_for_question(messages_for_api, command.args)

    if answer: await message.reply(answer)
    else: await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI.")

@dp.message(F.chat.type.in_({'group', 'supergroup'}))
async def handle_group_messages(message: Message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –µ–¥–∏–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –∫—ç—à."""
    chat_id = message.chat.id
    if chat_id not in load_enabled_chats(): return

    if chat_id not in daily_message_cache: daily_message_cache[chat_id] = []
    
    if message.text:
        daily_message_cache[chat_id].append({"text": message.text, "id": message.message_id})


async def main():
    init_db()
    asyncio.create_task(scheduled_summary_loop())
    asyncio.create_task(midnight_cleanup_loop())
    
    print("--- –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –Ω–∞–¥–µ–∂–Ω–æ–π –ª–æ–≥–∏–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –æ—á–∏—Å—Ç–∫–∏ ---")
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("--- –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é ---")
    except Exception as e:

        print(f"!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï: {e}")
